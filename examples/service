#!/bin/bash

# MIT License
#
# Copyright 2022-2024 Kazuhito Suda
#
# This file is part of node-red-contrib-letsfiware-NGSI
#
# https://github.com/lets-fiware/node-red-contrib-letsfiware-NGSI
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

set -Ceuo pipefail

WAIT_TIME=300

#
# wait for serive
#
wait() {
  local host
  local ret

  host=$1
  ret=$2

  echo "Wait for ${host} to be ready (${WAIT_TIME} sec)" 1>&2

  for i in $(seq "${WAIT_TIME}")
  do
    # shellcheck disable=SC2086
    if [ "${ret}" == "$(curl ${host} -o /dev/null -w '%{http_code}\n' -s)" ]; then
      echo "${host} is ready."
      return
    fi
    sleep 1
  done

  exit 1
}

uploadFlows()
{
	# Upload flows to Node-RED
	curl -sL http://localhost:1880/flows --data @flows.json --header 'Content-type:application/json'
}

createContainers()
{
	# Build containers
	docker compose build node-red --no-cache

	# Pull containers
	docker compose pull
}

startContainers()
{
	# Start up containers
	docker compose up -d

	# Wait for services
	wait "http://localhost:1026/version" "200"
	wait "http://localhost:1880/settings" "200"

	uploadFlows
}

startOrion()
{
	# Start up containers
	docker compose up -d orion node-red

	# Wait for services
	wait "http://localhost:1026/version" "200"
	wait "http://localhost:1880/settings" "200"

	uploadFlows
}

startComet()
{
	# Start up containers
	docker compose up -d comet node-red

	# Wait for services
	wait "http://localhost:1026/version" "200"
	wait "http://localhost:1880/settings" "200"

	uploadFlows
}

startQuantumleap()
{
	# Start up containers
	docker compose up -d quantumleap node-red

	# Wait for services
	wait "http://localhost:1026/version" "200"
	wait "http://localhost:1880/settings" "200"

	uploadFlows
}

stopContainers()
{
	docker compose down
}

command="$1"
case "${command}" in
	"help")
        echo "usage: services [create|start|orion|comet|quantumleap|stop]"
        ;;
	"stop")
		stopContainers
		;;
	"start")
		startContainers
		;;
	"orion")
		startOrion
		;;
	"comet")
		startComet
		;;
	"quantumleap")
		startQuantumleap
		;;
	"create")
		createContainers
		;;
	*)
		echo "Command not Found."
		echo "usage: services [create|start|orion|comet|quantumleap|stop]"
		exit 127;
		;;
esac
